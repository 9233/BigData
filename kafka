参考文章
https://www.cnblogs.com/zhqin/p/11992682.html

消息队列
Kafka是一个分布式的基于发布/订阅模式的消息队列

作为缓冲区，应对流量洪峰 统一日志接口



如何理解kafka的“分布式”

一说到分布式就应该想到多台机器，并且更应该想到的就是分区，kafka的分区是针对它的topic，对topic进行分区，topic进行分区之后，
如若topic数据量变大，那么增加分区即可。如何增加分区？增加节点就可以搞定，相比不分区的一台节点而言，kafka对于topic的分区增加了横向扩展性，
相比于不分区的一个节点来说，生产者(Producer)可以向多个分区(多个节点)同时并行发送文件，这样也提高了吞吐量。

为了配合分区的设计，提出消费者组的概念，组内每个消费者并行消费。

为了提高可用性，为每个partition增加若干副本，类似于NameNode的HA。

1）Producer ： 消息生产者，就是向kafka broker发消息的客户端；
2）Consumer ： 消息消费者，向kafka broker取消息的客户端；
3）Consumer Group （CG）： 消费者组，由多个consumer组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个消费者消费；消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。
4）Broker ： 一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。
5）Topic ： 可以理解为一个队列，生产者和消费者面向的都是一个topic；
6）Partition： 为了实现扩展性，一个非常大的topic可以分布到多个broker（即服务器）上，一个topic可以分为多个partition，每个partition是一个有序的队列；
7）Replica： 副本，为保证集群中的某个节点发生故障时，该节点上的partition数据不丢失，且kafka仍然能够继续工作，kafka提供了副本机制，一个topic的每个分区都有若干个副本，一个leader和若干个follower。
8）leader： 每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是leader。
(这意味着副本中除了leader直接和生产者和消费者直接打交道外，follower只负责完成和leader同步数据的工作，只有当leader挂掉之后，follower才会可能当选为leader，继续完成和生产者和消费者之间的工作)
9）follower： 每个分区多个副本中的“从”，实时从leader中同步数据，保持和leader数据的同步。leader发生故障时，某个follower会成为新的follower。


producer

broker : topic

TopicA-partion0-3 三个副本三个机器各一个，　follower 向 leader同步数据

offset　文件偏移量

customer




bin/kafka-server-start.sh -daemon config/server.properties


bin/kafka-topics.sh --zookeeper cdh101:2181 --create --replication-factor 3 --partitions 1 --topic first
bin/kafka-topics.sh --zookeeper cdh101:2181 --list



bin/kafka-topics.sh cdh101:2181 --delete --topic first

bin/kafka-console-producer.sh --broker-list cdh101:9092 --topic first



bin/kafka-topics.sh --zookeeper cdh101:2181 --describe --topic first

bin/kafka-console-consumer.sh --bootstrap-server cdh101:9092 --topic first

bin/kafka-console-consumer.sh --bootstrap-server cdh101:9092 --from-beginning --topic first



