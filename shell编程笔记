重点内容:
1.awk
找空行
awk '/^$/{print NR}' file.txt
去空行
sed -i '/^$/d' file.txt

求和
awk -F ' ' '{sum = sum + $1} END {print sum}' file.txt


2.sort

sort -nr file.txt

3.cut和awk类似
cut -d " " -f 2 sum.txt 
awk -F " " '{print $2}' sum.txt


4.sed
sed -i 's/a/b/g' file.txt

5.grep

grep content ./

grep -r content ./


================
1.变量
等号两侧不能有空格
变量默认类型都是字符串类型，无法直接进行数值运算。
a=3
echo $a
unset a

a=1+2
echo $a
1+2

常用系统变量
$HOME、$PWD、$SHELL、$USER等

列表
#!/bin/bash
# using a variable to hold the list
list="Alabama Alaska Arizona Arkansas Colorado"
for state in $list
do
echo "Have you ever visited $state?"
done


2.基本语法
$n	（功能描述：n为数字，$0代表该脚本名称，$1-$9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如${10}）

#!/bin/bash
echo "$0  $1   $2"

$？	（功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0
（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）

./helloworld.sh 
hello world
echo $?
0

3.运算符	
1．基本语法
（1）“$((运算式))”或“$[运算式]”
（2）expr  + , - , \*,  /,  %    加，减，乘，除，取余
注意：expr运算符间要有空格
2．案例实操： 
（1）计算3+2的值
[atguigu@hadoop101 datas]$ expr 2 + 3
5
（2）计算3-2的值
[atguigu@hadoop101 datas]$ expr 3 - 2 
1
（3）计算（2+3）X4的值
	（a）expr一步完成计算
[atguigu@hadoop101 datas]$ expr `expr 2 + 3` \* 4
20
（b）采用$[运算式]方式
[atguigu@hadoop101 datas]# S=$[(2+3)*4]
[atguigu@hadoop101 datas]# echo $S


4.条件判断
===========
1．基本语法
[ condition ]（注意condition前后要有空格）
注意：条件非空即为true，[ atguigu ]返回true，[] 返回false。
2. 常用判断条件
（1）两个整数之间比较
= 字符串比较
-lt 小于（less than）			-le 小于等于（less equal）
-eq 等于（equal）				-gt 大于（greater than）
-ge 大于等于（greater equal）	-ne 不等于（Not equal）
（2）按照文件权限进行判断
-r 有读的权限（read）			-w 有写的权限（write）
-x 有执行的权限（execute）
（3）按照文件类型进行判断
-f 文件存在并且是一个常规的文件（file）
-e 文件存在（existence）		-d 文件存在并是一个目录（directory）
3．案例实操
	（1）23是否大于等于22
[atguigu@hadoop101 datas]$ [ 23 -ge 22 ]
[atguigu@hadoop101 datas]$ echo $?
0
	（2）helloworld.sh是否具有写权限
[atguigu@hadoop101 datas]$ [ -w helloworld.sh ]
[atguigu@hadoop101 datas]$ echo $?
0
	（3）/home/atguigu/cls.txt目录中的文件是否存在
[atguigu@hadoop101 datas]$ [ -e /home/atguigu/cls.txt ]
[atguigu@hadoop101 datas]$ echo $?
1
（4）多条件判断（&& 表示前一条命令执行成功时，才执行后一条命令，|| 表示上一条命令执行失败后，才执行下一条命令）
[atguigu@hadoop101 ~]$ [ condition ] && echo OK || echo notok
OK
[atguigu@hadoop101 datas]$ [ condition ] && [ ] || echo notok
notok
第7章 流程控制（重点）
7.1 if 判断
1．基本语法
if [ 条件判断式 ] 
  then 
    程序 
fi
	注意事项：
（1）[ 条件判断式 ]，中括号和条件判断式之间必须有空格
（2）if后要有空格
2．案例实操
（1）输入一个数字，如果是1，则输出banzhang zhen shuai，如果是2，则输出cls zhen mei，如果是其它，什么也不输出。
[atguigu@hadoop101 datas]$ touch if.sh
[atguigu@hadoop101 datas]$ vim if.sh

#!/bin/bash

if [ $1 -eq "1" ]
then
        echo "banzhang zhen shuai"
elif [ $1 -eq "2" ]
then
        echo "cls zhen mei"
fi

===
for 循环
1．基本语法1
	for (( 初始值;循环控制条件;变量变化 )) 
  do 
    程序 
  done
2．案例实操
（1）从1加到100
[atguigu@hadoop101 datas]$ touch for1.sh
[atguigu@hadoop101 datas]$ vim for1.sh

#!/bin/bash

s=0
for((i=0;i<=100;i++))
do
        s=$[$s+$i]
done
echo $s

[atguigu@hadoop101 datas]$ chmod 777 for1.sh 
[atguigu@hadoop101 datas]$ ./for1.sh 
“5050”
3．基本语法2
for 变量 in 值1 值2 值3… 
  do 
    程序 
  done
4．案例实操
	（1）打印所有输入参数
[atguigu@hadoop101 datas]$ touch for2.sh
[atguigu@hadoop101 datas]$ vim for2.sh

#!/bin/bash
#打印数字

for i in $*
    do
      echo "ban zhang love $i "
    done

[atguigu@hadoop101 datas]$ chmod 777 for2.sh 
[atguigu@hadoop101 datas]$ bash for2.sh cls xz bd
ban zhang love cls
ban zhang love xz
ban zhang love bd


==============

while 循环
1．基本语法
while [ 条件判断式 ] 
  do 
    程序
  done
2．案例实操
	（1）从1加到100
[atguigu@hadoop101 datas]$ touch while.sh
[atguigu@hadoop101 datas]$ vim while.sh

#!/bin/bash
s=0
i=1
while [ $i -le 100 ]
do
        s=$[$s+$i]
        i=$[$i+1]
done

echo $s


==========


2.函数
系统自带函数
dirname基本语法
	dirname 文件绝对路径		（功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））

dirname /home/atguigu/banzhang.txt
自定义函数
1．基本语法
function name {
commands
}

name() {
commands
}

2．经验技巧
	（1）必须在调用函数地方之前，先声明函数，shell脚本是逐行运行。不会像其它语言一样先编译。
	（2）函数返回值，只能通过$?系统变量获得，可以显示加：return返回，如果不加，将以最后一条命令运行结果，作为返回值。return后跟数值n(0-255)
3．案例实操
	（1）计算两个输入参数的和
[atguigu@hadoop101 datas]$ touch fun.sh
[atguigu@hadoop101 datas]$ vim fun.sh

#!/bin/bash
function sum()
{
    s=0
    s=$[ $1 + $2 ]
    echo "$s"
}

read -p "Please input the number1: " n1;
read -p "Please input the number2: " n2;
sum $n1 $n2;

[atguigu@hadoop101 datas]$ chmod 777 fun.sh
[atguigu@hadoop101 datas]$ ./fun.sh 
Please input the number1: 2
Please input the number2: 5


=============

企业真实面试题
1.找出file.txt中空行所在的行号

awk '/^$/{print NR}' file.txt

2.把file.txt中的enforcing改成disabled

sed -i 's/enforcing/disabled/g' file.txt

3.统计file.txt输出第二列的和
张三 40
李四 50
王五 60

输出并排序
awk -F ' ' '{print $2}' sum.txt|sort -nr
输出求和

awk -F ' ' '{sum=sum+$2} END {print sum}' sum.txt

4.Shell脚本里如何检查一个文件是否存在？如果不存在该如何处理？

 #!/bin/bash

if [ -f file.txt ]
then
   echo "文件存在!"
else
   echo "文件不存在!"
fi

5.用shell写一个脚本，对文本中无序的一列数字排序并求和

排序:
sort -n file.txt

排序&求和:

sort -n file.txt|awk '{sum = sum+$1} END {print sum}'

